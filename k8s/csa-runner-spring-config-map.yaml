kind: ConfigMap
apiVersion: v1
metadata:
  name: csa-runner-configmap
  labels:
    app: gridcapa
    component: runner
    region: swe
    process: csa
data:
  application.yml: |-
    server:
      port: 8080
    spring:
      application:
        name: swe-csa-runner
      rabbitmq:
        host: gridcapa-rabbitmq
        username: ${RABBITMQ_USER}
        password: ${RABBITMQ_PASSWORD}
        port: 5672
        template:
          reply-timeout: 18000000
      cloud:
        function:
          definition: interrupt;request
        stream:
          default:
            binder: rabbit
          bindings:
            interrupt-in-0:
              destination: csa-interrupt
            request-in-0:
              group: swe-csa-runner
              destination: csa-request
            request-out-0:
              group: swe-csa-runner
              destination: csa-response
            acknowledgement:
              group: swe-csa-runner
              destination: csa-request-ack
          rabbit:
            bindings:
              interrupt-in-0:
                consumer:
                  bindingRoutingKey: "#"    
    rao-runner-server:
      amqp:
        client-app-id: swe-csa-runner
        queue-name: swe-csa-rao-request-queue
    dichotomy-parameters:
      index:
        precision: 50
        max-iterations-by-border: 10
    s3:
      inputs:
        bucket: swe-csa-bucket
        user: ${MINIO_ACCESS_KEY}
        secret: ${MINIO_SECRET_KEY}
        url: http://gridcapa-minio:9000/
      artifacts:
        bucket: swe-csa-bucket
        user: ${MINIO_ACCESS_KEY}
        secret: ${MINIO_SECRET_KEY}
        url: http://gridcapa-minio:9000/
      outputs:
        bucket: swe-csa-bucket
        user: ${MINIO_ACCESS_KEY}
        secret: ${MINIO_SECRET_KEY}
        url: http://gridcapa-minio:9000/
    logging:
      config: /config/logback.xml
    logback:
      amqp:
        exchange: swe-csa-logs-exchange
        routing-key: "#"

  logback.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration>
        <springProperty scope="context" name="rabbitMQHost" source="spring.rabbitmq.host" defaultValue="localhost"/>
        <springProperty scope="context" name="rabbitMQPort" source="spring.rabbitmq.port" defaultValue="5672"/>
        <springProperty scope="context" name="rabbitMQUserName" source="spring.rabbitmq.username" defaultValue="guest"/>
        <springProperty scope="context" name="rabbitMQPassword" source="spring.rabbitmq.password" defaultValue="guest"/>
        <springProperty scope="context" name="rabbitMQExchangeName" source="logback.amqp.exchange"
                        defaultValue="task-manager-events"/>
        <springProperty scope="context" name="rabbitMQRoutingKey" source="logback.amqp.routing-key" defaultValue="#"/>
        <springProperty scope="context" name="serviceName" source="spring.application.name"
                        defaultValue="gridcapa-back-end"/>
        <!-- specific appender to send business events to a rabbitmq exchange-->
        <appender name="amqp-business-events" class="org.springframework.amqp.rabbit.logback.AmqpAppender">
            <!-- Logstash encoder is used as a trick to convert plain text to json -->
            <encoder class="net.logstash.logback.encoder.LogstashEncoder">
                <customFields>{"serviceName": "${serviceName}"}</customFields>
                <includeContext>false</includeContext>
                <fieldNames>
                    <timestamp>timestamp</timestamp>
                    <thread>[ignore]</thread>
                    <logger>[ignore]</logger>
                    <version>[ignore]</version>
                    <levelValue>[ignore]</levelValue>
                </fieldNames>
            </encoder>
            <!-- RabbitMQ connection -->
            <host>${rabbitMQHost}</host>
            <port>${rabbitMQPort}</port>
            <username>${rabbitMQUserName}</username>
            <password>${rabbitMQPassword}</password>
            <exchangeName>${rabbitMQExchangeName}</exchangeName>
            <routingKeyPattern>${rabbitMQRoutingKey}</routingKeyPattern>
            <declareExchange>true</declareExchange>
            <exchangeType>topic</exchangeType>
            <generateId>true</generateId>
            <charset>UTF-8</charset>
            <durable>true</durable>
            <deliveryMode>PERSISTENT</deliveryMode>
        </appender>
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{yyyy-MM-dd'T'HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            </encoder>
        </appender>
        <!-- This logger name must match Logger's names in java code
        Do not bind any logger with the appender "amqp-business-events"!
        You should bind with "amqp-business-events" appender only Loggers you want to see in gridcapa processes as a final user-->
        <logger name="SWE_CSA_BUSINESS_LOGGER" additivity="false" level="INFO">
            <appender-ref ref="amqp-business-events"/>
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="com.powsybl.openrao.commons.logs.RaoBusinessLogs" additivity="false"  level="INFO">
            <appender-ref ref="amqp-business-events"/>
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="com.powsybl.openrao.commons.logs.RaoBusinessWarns" additivity="false"  level="WARN">
            <appender-ref ref="amqp-business-events"/>
            <appender-ref ref="STDOUT"/>
        </logger>
        
          
        <logger name="com.powsybl.openrao" level="INFO" additivity="false" >
            <appender-ref ref="STDOUT"/>
        </logger>    
        <logger name="com.powsybl.commons" level="WARN" additivity="false" >
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="com.powsybl.openrao.virtualhubs" level="WARN" additivity="false" >
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="com.powsybl" level="ERROR" additivity="false" >
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="com.powsybl.openrao.commons.logs.TechnicalLogs" level="ERROR" additivity="false" >
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="com.powsybl.openloadflow" level="ERROR" additivity="false" >
            <appender-ref ref="STDOUT"/>
        </logger>
        <logger name="org.springframework.amqp" level="OFF" additivity="false" >
            <appender-ref ref="STDOUT"/>
        </logger>

    </configuration>
